---
guide: app
step: picture-uploads
title: Add picture uploads
---

We need to install a piece of software to let us upload files in Rails.

Open `Gemfile` in the project directory using your text editor and under the line


= preserve do 
  - code("ruby") do
    gem 'sqlite3'

add


= preserve do 
  - code("sh") do
    gem 'carrierwave'

**Coach:** Explain what libraries are and why they are useful. Describe what open source software is.

In the terminal run:


= preserve do 
  - code("sh") do
    bundle

Now we can generate the code for handling uploads. In the terminal run:


= preserve do 
  - code("sh") do
    rails generate uploader Picture

At this point you need to **restart the Rails server process** in the terminal.

Hit `CTRL-C` in the terminal to quit the server. Once it has stopped, you can press the up arrow to get to the last command entered, then hit enter to start the server again.

This is needed for the app to load the added library.

Open `app/models/idea.rb` and under the line

= preserve do 
  - code("ruby") do
    class Idea < ActiveRecord::Base

add

= preserve do 
  - code("ruby") do
    mount_uploader :picture, PictureUploader

Open `app/views/ideas/_form.html.erb` and change

= preserve do 
  - code("erb") do
    <%= f.text_field :picture %>

to


= preserve do 
  - code("erb") do
    <%= f.file_field :picture %>

In your browser, add new idea with a picture. When you upload a picture it doesn't look nice because it only shows a path to the file, so let's fix that.

Open `app/views/ideas/show.html.erb` and change


= preserve do 
  - code("erb") do
    <%= @idea.picture %>

to

= preserve do 
  - code("erb") do
    <%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>

%p Now refresh your browser to see what changed.

**Coach:** Talk a little about HTML.